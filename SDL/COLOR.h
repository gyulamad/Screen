#pragma once

struct SDL_Color_ext {
    Uint8 r;
    Uint8 g;
    Uint8 b;
    Uint8 a;
    bool operator==(const SDL_Color_ext& other) {
        return 
            r == other.r &&
            g == other.g &&
            b == other.b &&
            a == other.a;
    }
    bool operator!=(const SDL_Color_ext& other) {
        return !(*this == other);
    }
};

// static const uint32_t EGARGB[] = {
//     0x000000, 0x0000AA, 0x00AA00, 0x00AAAA,
//     0xAA0000, 0xAA00AA, 0xAA5500, 0xAAAAAA,
//     0x555555, 0x5555FF, 0x55FF55, 0x55FFFF,
//     0xFF5555, 0xFF55FF, 0xFFFF55, 0xFFFFFF
// };

static const SDL_Color_ext EGASDL[] = {
    { 0x00, 0x00, 0x00, 0xFF },  // black
    { 0x00, 0x00, 0xAA, 0xFF },  // dark blue
    { 0x00, 0xAA, 0x00, 0xFF },  // dark green
    { 0x00, 0xAA, 0xAA, 0xFF },  // dark cyan
    { 0xAA, 0x00, 0x00, 0xFF },  // dark red
    { 0xAA, 0x00, 0xAA, 0xFF },  // dark magenta
    { 0xAA, 0x55, 0x00, 0xFF },  // dark yellow/orange
    { 0xAA, 0xAA, 0xAA, 0xFF },  // light grey
    { 0x55, 0x55, 0x55, 0xFF },  // dark grey
    { 0x55, 0x55, 0xFF, 0xFF },  // light blue
    { 0x55, 0xFF, 0x55, 0xFF },  // light green
    { 0x55, 0xFF, 0xFF, 0xFF },  // light cyan
    { 0xFF, 0x55, 0x55, 0xFF },  // light red
    { 0xFF, 0x55, 0xFF, 0xFF },  // light magenta
    { 0xFF, 0xFF, 0x55, 0xFF },  // yellow
    { 0xFF, 0xFF, 0xFF, 0xFF }   // white
};

#define Color SDL_Color_ext

#define COLOR(index) (EGASDL[index])
